// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fetchRelativeFile() should fetch a .js file in a subdirectory 1`] = `
"// @flow
import React, { Component, type Node } from 'react';
import type { Package, Files, FetchConfig } from '../types';
import fetchFiles from '../fetchFiles';

const codesandboxURL = 'https://codesandbox.io/api/v1/sandboxes/define';

type State = {
  parameters: string,
};

type Props = {
  /* The absolute path to the example within the git file structure */
  examplePath: string,
  /* This is all the information we need to fetch information from github or bitbucket */
  gitInfo: FetchConfig,
  example?: string | Promise<string>,
  /* Either take in a package.json object, or a string as the path of the package.json */
  pkgJSON?: Package | string | Promise<Package | string>,
  /* paths in the example that we do not want to be pulled from their relativeLocation */
  importReplacements: Array<[string, string]>,
  /* Dependencies we always include. Most likely react and react-dom */
  dependencies?: { [string]: string },
  /* Do not actually deploy to codesanbox. Used to for testing alongside afterDeploy */
  skipDeploy?: boolean,
  ignoreInternalImports?: boolean,
  /* function that can be called once the deploy has occurred, useful if you want to give feedback or test how CSB is working */
  afterDeploy?: (
    { parameters: string, files: Files } | { error: any },
  ) => mixed,
  /* Pass in files separately to fetching them. Useful to go alongisde specific replacements in importReplacements */
  providedFiles?: Files,
  children?: Node,
};

export default class CodeSandboxDeployer extends Component<Props, State> {
  form: HTMLFormElement | null;

  state = { parameters: '' };
  static defaultProps = {
    children: <button type=\\"submit\\">Deploy to CodeSandbox</button>,
    dependencies: {},
    providedFiles: {},
    importReplacements: [],
  };

  deployToCSB = (e: MouseEvent) => {
    const {
      examplePath,
      pkgJSON,
      gitInfo,
      dependencies,
      skipDeploy,
      afterDeploy,
      importReplacements,
      providedFiles,
      example,
    } = this.props;
    e.preventDefault();

    fetchFiles(
      examplePath,
      pkgJSON,
      gitInfo,
      importReplacements,
      dependencies,
      providedFiles,
      example,
    )
      .then(({ parameters, files }) => {
        this.setState({ parameters }, () => {
          if (!skipDeploy && this.form) this.form.submit();
          if (afterDeploy) afterDeploy({ parameters, files });
        });
      })
      .catch(error => {
        if (afterDeploy) afterDeploy({ error });
      });
  };

  render() {
    return (
      <form
        style={{ display: 'inline-block' }}
        onSubmit={this.deployToCSB}
        action=\\"https://codesandbox.io/api/v1/sandboxes/define\\"
        method=\\"POST\\"
        target=\\"_blank\\"
        ref={r => {
          this.form = r;
        }}
      >
        <input type=\\"hidden\\" name=\\"parameters\\" value={this.state.parameters} />
        {this.props.children}
      </form>
    );
  }
}
"
`;

exports[`fetchRelativeFile() should fetch a .json file at the root 1`] = `
"{
  \\"name\\": \\"react-codesandboxer\\",
  \\"version\\": \\"0.2.1\\",
  \\"description\\":
    \\"A simple react component to help easily deploy an example to codesandbox\\",
  \\"main\\": \\"dist/index.js\\",
  \\"scripts\\": {
    \\"test\\": \\"yarn jest\\",
    \\"build\\": \\"babel src -d dist --ignore __tests__/\\",
    \\"prepublishOnly\\": \\"yarn test && yarn flow && yarn build\\",
    \\"dev\\": \\"yarn build --watch\\"
  },
  \\"keywords\\": [\\"codesandbox\\", \\"react\\", \\"react-component\\"],
  \\"author\\": \\"Ben Conolly\\",
  \\"license\\": \\"MIT\\",
  \\"devDependencies\\": {
    \\"babel-cli\\": \\"^6.26.0\\",
    \\"babel-plugin-syntax-dynamic-import\\": \\"^6.18.0\\",
    \\"babel-plugin-transform-class-properties\\": \\"^6.24.1\\",
    \\"babel-plugin-transform-object-rest-spread\\": \\"^6.26.0\\",
    \\"babel-plugin-transform-runtime\\": \\"^6.23.0\\",
    \\"babel-preset-env\\": \\"^1.6.1\\",
    \\"babel-preset-flow\\": \\"^6.23.0\\",
    \\"babel-preset-react\\": \\"^6.24.1\\",
    \\"flow-bin\\": \\"^0.64.0\\",
    \\"jest\\": \\"^22.1.4\\",
    \\"jest-in-case\\": \\"^1.0.2\\",
    \\"prettier\\": \\"^1.10.2\\",
    \\"react\\": \\"16.2.0\\"
  },
  \\"peerDependencies\\": {
    \\"react\\": \\"^0.14.9 || ^15.3.0 || ^16.0.0-rc || ^16.0\\",
    \\"react-dom\\": \\"^0.14.9 || ^15.3.0 || ^16.0.0-rc || ^16.0\\"
  },
  \\"dependencies\\": {
    \\"codesandbox\\": \\"^1.1.14\\"
  },
  \\"files\\": [\\"dist\\", \\"README.md\\"],
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://github.com/Noviny/react-codesandboxer.git\\"
  }
}
"
`;

exports[`fetchRelativeFile() should fetch an index.js file in a named subdirectory 1`] = `
"// @flow
import React, { Component, type Node } from 'react';
import type { Package, Files, FetchConfig } from '../types';
import fetchFiles from '../fetchFiles';

const codesandboxURL = 'https://codesandbox.io/api/v1/sandboxes/define';

type State = {
  parameters: string,
};

type Props = {
  /* The absolute path to the example within the git file structure */
  examplePath: string,
  /* This is all the information we need to fetch information from github or bitbucket */
  gitInfo: FetchConfig,
  example?: string | Promise<string>,
  /* Either take in a package.json object, or a string as the path of the package.json */
  pkgJSON?: Package | string | Promise<Package | string>,
  /* paths in the example that we do not want to be pulled from their relativeLocation */
  importReplacements: Array<[string, string]>,
  /* Dependencies we always include. Most likely react and react-dom */
  dependencies?: { [string]: string },
  /* Do not actually deploy to codesanbox. Used to for testing alongside afterDeploy */
  skipDeploy?: boolean,
  ignoreInternalImports?: boolean,
  /* function that can be called once the deploy has occurred, useful if you want to give feedback or test how CSB is working */
  afterDeploy?: (
    { parameters: string, files: Files } | { error: any },
  ) => mixed,
  /* Pass in files separately to fetching them. Useful to go alongisde specific replacements in importReplacements */
  providedFiles?: Files,
  children?: Node,
};

export default class CodeSandboxDeployer extends Component<Props, State> {
  form: HTMLFormElement | null;

  state = { parameters: '' };
  static defaultProps = {
    children: <button type=\\"submit\\">Deploy to CodeSandbox</button>,
    dependencies: {},
    providedFiles: {},
    importReplacements: [],
  };

  deployToCSB = (e: MouseEvent) => {
    const {
      examplePath,
      pkgJSON,
      gitInfo,
      dependencies,
      skipDeploy,
      afterDeploy,
      importReplacements,
      providedFiles,
      example,
    } = this.props;
    e.preventDefault();

    fetchFiles(
      examplePath,
      pkgJSON,
      gitInfo,
      importReplacements,
      dependencies,
      providedFiles,
      example,
    )
      .then(({ parameters, files }) => {
        this.setState({ parameters }, () => {
          if (!skipDeploy && this.form) this.form.submit();
          if (afterDeploy) afterDeploy({ parameters, files });
        });
      })
      .catch(error => {
        if (afterDeploy) afterDeploy({ error });
      });
  };

  render() {
    return (
      <form
        style={{ display: 'inline-block' }}
        onSubmit={this.deployToCSB}
        action=\\"https://codesandbox.io/api/v1/sandboxes/define\\"
        method=\\"POST\\"
        target=\\"_blank\\"
        ref={r => {
          this.form = r;
        }}
      >
        <input type=\\"hidden\\" name=\\"parameters\\" value={this.state.parameters} />
        {this.props.children}
      </form>
    );
  }
}
"
`;
